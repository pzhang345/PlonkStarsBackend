"""empty message

Revision ID: 24723103c9d0
Revises: b319535879e6
Create Date: 2025-04-08 18:29:49.847118

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '24723103c9d0'
down_revision = 'b319535879e6'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    conn = op.get_bind()
    dialect = conn.dialect.name

    # Function to handle dropping and creating constraints conditionally for MySQL and Postgres
    def manage_constraints(batch_op, table_name, constraints_to_drop, constraints_to_create):
        for constraint in constraints_to_drop:
            batch_op.drop_constraint(constraint, type_='foreignkey')
        for ref_table, ref_columns in constraints_to_create:
            batch_op.create_foreign_key(None, ref_table, ref_columns, ['id'], ondelete='CASCADE')

    with op.batch_alter_table('guesses', schema=None) as batch_op:
        if dialect == "postgresql":
            manage_constraints(batch_op, 'guesses',
                ['guesses_user_id_fkey', 'guesses_round_id_fkey'],  # Drop constraints
                [('users', ['user_id']), ('rounds', ['round_id'])]  # Create constraints
            )
        elif dialect == "mysql":
            manage_constraints(batch_op, 'guesses',
                ['guesses_ibfk_1', 'guesses_ibfk_2'],  # Drop constraints
                [('users', ['user_id']), ('rounds', ['round_id'])]  # Create constraints
            )

    with op.batch_alter_table('mapbounds', schema=None) as batch_op:
        if dialect == "postgresql":
            manage_constraints(batch_op, 'mapbounds',
                ['mapbounds_bound_id_fkey', 'mapbounds_map_id_fkey'],  # Drop constraints
                [('bounds', ['bound_id']), ('maps', ['map_id'])]  # Create constraints
            )
        elif dialect == "mysql":
            manage_constraints(batch_op, 'mapbounds',
                ['mapbounds_ibfk_1', 'mapbounds_ibfk_2'],  # Drop constraints
                [('bounds', ['bound_id']), ('maps', ['map_id'])]  # Create constraints
            )

    with op.batch_alter_table('maps', schema=None) as batch_op:
        if dialect == "postgresql":
            manage_constraints(batch_op, 'maps',
                ['maps_creator_id_fkey'],  # Drop constraints
                [('users', ['creator_id'])]  # Create constraints
            )
        elif dialect == "mysql":
            manage_constraints(batch_op, 'maps',
                ['maps_ibfk_1'],  # Drop constraints
                [('users', ['creator_id'])]  # Create constraints
            )

    with op.batch_alter_table('mapstats', schema=None) as batch_op:
        if dialect == "postgresql":
            manage_constraints(batch_op, 'mapstats',
                ['mapstats_map_id_fkey'],  # Drop constraints
                [('maps', ['map_id'])]  # Create constraints
            )
        elif dialect == "mysql":
            manage_constraints(batch_op, 'mapstats',
                ['mapstats_ibfk_1'],  # Drop constraints
                [('maps', ['map_id'])]  # Create constraints
            )

    with op.batch_alter_table('players', schema=None) as batch_op:
        if dialect == "postgresql":
            manage_constraints(batch_op, 'players',
                ['players_session_id_fkey', 'players_user_id_fkey'],  # Drop constraints
                [('sessions', ['session_id']), ('users', ['user_id'])]  # Create constraints
            )
        elif dialect == "mysql":
            manage_constraints(batch_op, 'players',
                ['players_ibfk_1', 'players_ibfk_2'],  # Drop constraints
                [('sessions', ['session_id']), ('users', ['user_id'])]  # Create constraints
            )

    with op.batch_alter_table('rounds', schema=None) as batch_op:
        if dialect == "postgresql":
            manage_constraints(batch_op, 'rounds',
                ['rounds_session_id_fkey', 'rounds_location_id_fkey'],  # Drop constraints
                [('sessions', ['session_id']), ('svlocations', ['location_id'])]  # Create constraints
            )
        elif dialect == "mysql":
            manage_constraints(batch_op, 'rounds',
                ['rounds_ibfk_1', 'rounds_ibfk_2'],  # Drop constraints
                [('sessions', ['session_id']), ('svlocations', ['location_id'])]  # Create constraints
            )

    with op.batch_alter_table('roundstats', schema=None) as batch_op:
        if dialect == "postgresql":
            manage_constraints(batch_op, 'roundstats',
                ['roundstats_session_id_fkey', 'roundstats_user_id_fkey'],  # Drop constraints
                [('sessions', ['session_id']), ('users', ['user_id'])]  # Create constraints
            )
        elif dialect == "mysql":
            manage_constraints(batch_op, 'roundstats',
                ['roundstats_ibfk_1', 'roundstats_ibfk_2'],  # Drop constraints
                [('sessions', ['session_id']), ('users', ['user_id'])]  # Create constraints
            )

    with op.batch_alter_table('sessions', schema=None) as batch_op:
        if dialect == "postgresql":
            manage_constraints(batch_op, 'sessions',
                ['sessions_host_id_fkey'],  # Drop constraints
                [('users', ['host_id']), ('maps', ['map_id'])]  # Create constraints
            )
        elif dialect == "mysql":
            manage_constraints(batch_op, 'sessions',
                ['sessions_ibfk_1', 'sessions_ibfk_2'],  # Drop constraints
                [('users', ['host_id']), ('maps', ['map_id'])]  # Create constraints
            )

    with op.batch_alter_table('usermapstats', schema=None) as batch_op:
        if dialect == "postgresql":
            manage_constraints(batch_op, 'usermapstats',
                ['usermapstats_map_id_fkey', 'usermapstats_user_id_fkey'],  # Drop constraints
                [('maps', ['map_id']), ('users', ['user_id'])]  # Create constraints
            )
        elif dialect == "mysql":
            manage_constraints(batch_op, 'usermapstats',
                ['usermapstats_ibfk_1', 'usermapstats_ibfk_2'],  # Drop constraints
                [('maps', ['map_id']), ('users', ['user_id'])]  # Create constraints
            )

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('usermapstats', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('usermapstats_ibfk_2', 'maps', ['map_id'], ['id'])
        batch_op.create_foreign_key('usermapstats_ibfk_1', 'users', ['user_id'], ['id'])

    with op.batch_alter_table('sessions', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('sessions_ibfk_2', 'maps', ['map_id'], ['id'])
        batch_op.create_foreign_key('sessions_ibfk_1', 'users', ['host_id'], ['id'])

    with op.batch_alter_table('roundstats', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('roundstats_ibfk_2', 'sessions', ['session_id'], ['id'])
        batch_op.create_foreign_key('roundstats_ibfk_1', 'users', ['user_id'], ['id'])

    with op.batch_alter_table('rounds', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('rounds_ibfk_1', 'svlocations', ['location_id'], ['id'])
        batch_op.create_foreign_key('rounds_ibfk_2', 'sessions', ['session_id'], ['id'])

    with op.batch_alter_table('players', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('players_ibfk_1', 'users', ['user_id'], ['id'])
        batch_op.create_foreign_key('players_ibfk_2', 'sessions', ['session_id'], ['id'])

    with op.batch_alter_table('mapstats', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('mapstats_ibfk_1', 'maps', ['map_id'], ['id'])

    with op.batch_alter_table('maps', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('maps_ibfk_1', 'users', ['creator_id'], ['id'])

    with op.batch_alter_table('mapbounds', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('mapbounds_ibfk_2', 'maps', ['map_id'], ['id'])
        batch_op.create_foreign_key('mapbounds_ibfk_1', 'bounds', ['bound_id'], ['id'])

    with op.batch_alter_table('guesses', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('guesses_ibfk_2', 'rounds', ['round_id'], ['id'])
        batch_op.create_foreign_key('guesses_ibfk_1', 'users', ['user_id'], ['id'])

    # ### end Alembic commands ###
